diff --git a/lib/sha1.c b/lib/sha1.c
index da5bc16..edfd6fd 100644
--- a/lib/sha1.c
+++ b/lib/sha1.c
@@ -36,7 +36,7 @@
 #include <string.h>
 #endif /* USE_HOSTCC */
 #include <watchdog.h>
-#include "sha1.h"
+#include <sha1.h>
 
 /*
  * 32-bit integer manipulation macros (big endian)
@@ -73,7 +73,7 @@ void sha1_starts (sha1_context * ctx)
 	ctx->state[4] = 0xC3D2E1F0;
 }
 
-static void sha1_process (sha1_context * ctx, unsigned char data[64])
+static void sha1_process (sha1_context * ctx, const unsigned char data[64])
 {
 	unsigned long temp, W[16], A, B, C, D, E;
 
@@ -230,7 +230,7 @@ static void sha1_process (sha1_context * ctx, unsigned char data[64])
 /*
  * SHA-1 process buffer
  */
-void sha1_update (sha1_context * ctx, unsigned char *input, int ilen)
+void sha1_update (sha1_context * ctx, const unsigned char *input, int ilen)
 {
 	int fill;
 	unsigned long left;
@@ -305,7 +305,7 @@ void sha1_finish (sha1_context * ctx, unsigned char output[20])
 /*
  * Output = SHA-1( input buffer )
  */
-void sha1_csum (unsigned char *input, int ilen, unsigned char output[20])
+void sha1_csum (const unsigned char *input, int ilen, unsigned char output[20])
 {
 	sha1_context ctx;
 
@@ -318,7 +318,7 @@ void sha1_csum (unsigned char *input, int ilen, unsigned char output[20])
  * Output = SHA-1( input buffer ). Trigger the watchdog every 'chunk_sz'
  * bytes of input processed.
  */
-void sha1_csum_wd (unsigned char *input, int ilen, unsigned char output[20],
+void sha1_csum_wd (const unsigned char *input, int ilen, unsigned char output[20],
 			unsigned int chunk_sz)
 {
 	sha1_context ctx;
@@ -347,11 +347,56 @@ void sha1_csum_wd (unsigned char *input, int ilen, unsigned char output[20],
 	sha1_finish (&ctx, output);
 }
 
+void hmac_starts(sha1_context *ctx, const unsigned char *key, unsigned int len)
+{
+	unsigned short i;
+	unsigned char k_ipad[64];
+
+	memset(k_ipad, 0x36, 64);
+	sha1_starts(ctx);
+
+	for (i = 0; i < len; ++i) {
+		if (i >= 64) break;
+		k_ipad[i] ^= key[i];
+	}
+
+	sha1_update(ctx, k_ipad, 64);
+	memset(k_ipad, 0, 64);
+}
+
+void hmac_update(sha1_context *ctx, const unsigned char *data, unsigned int len)
+{
+	sha1_update(ctx, data, len);
+}
+
+void hmac_finish(sha1_context *ctx, const unsigned char *key, unsigned int len, unsigned char *output)
+{
+	unsigned short i;
+	unsigned char k_opad[64], dest[20];
+
+	memset(k_opad, 0x5C, 64);
+	sha1_finish(ctx, dest);
+
+	for (i = 0; i < len; ++i) {
+		if (i >= 64) break;
+		k_opad[i] ^= key[i];
+	}
+
+	sha1_starts(ctx);
+	sha1_update(ctx, k_opad, 64);
+	sha1_update(ctx, dest, 20);
+	sha1_finish(ctx, output);
+
+	memset(dest, 0, 20);
+	memset(k_opad, 0, 64);
+	memset(ctx, 0, sizeof(sha1_context));
+}
+
 /*
  * Output = HMAC-SHA-1( input buffer, hmac key )
  */
-void sha1_hmac (unsigned char *key, int keylen,
-		unsigned char *input, int ilen, unsigned char output[20])
+void sha1_hmac (const unsigned char *key, int keylen,
+		const unsigned char *input, int ilen, unsigned char output[20])
 {
 	int i;
 	sha1_context ctx;
